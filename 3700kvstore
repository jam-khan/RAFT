#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os
import random

# Implement responses

BROADCAST = "FFFF"
T = 200

APPEND_ENTRIES_RESPONSE = "APPEND_ENTRIES_RESPONSE"
APPEND_ENTRIES          = "APPEND_ENTRIES"
REQUEST_VOTE            = "REQUEST_VOTE"
GIVE_VOTE               = "GIVE_VOTE"
CANDIDATE               = "CANDIDATE"
FOLLOWER                = "FOLLOWER"
LEADER                  = "LEADER"
COMMIT                  = "COMMIT"
COMMITTED               = "COMMITTED"
PUT                     = "put"
GET                     = "get"


# Case: Sending an AppendEntries
# Waiting for ACK?



class Replica:
    def __init__(self, port, id, others):
        
        self.port   = port
        self.id     = id
        self.others = others
        self.status = FOLLOWER # Every replica starts as a FOLLOWER
        
        self.currentTerm = 0          # Initially, it is the first term.
        self.votedFor    = None       # Id of the candidate voted for during an election.
        self.leader      = BROADCAST  # Initially, leader is BROADCAST ("FFFF") as it is unknown.
        self.log         = []         # Log to maintain entries
        self.datastore   = {}         # State machine (data-store) where logs will be applied
        self.voteCount   = []          # Keeps track of the votes if Replica is a Candidate during an election
        
        
        # Volatile state on leaders
        # Below needs to be re-initialized after every election.
        self.client = []
        self.nextIndex  = {}
        self.matchIndex = {}
        
        
        # We initialize all to 0 for all replicas
        for replicaId in others:
            self.nextIndex[replicaId]  = 0
            self.matchIndex[replicaId] = -1
        
        # Volatile State on all servers
        self.commitIndex = -1 # Index of the highest log entry known to be committed.
        self.lastApplied = -1 # Index of the highest log entry applied on state machine.
        
        self.lastLogIndex = -1
        self.lastLogTerm  = 0
        
        self.timerStart      = time.time() * 1000      # Timer to keep track of timeouts
        
        
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.socket.setblocking(False)

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)


    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    
    # startElection() calls the election and requests votes from other replicas.
    def startElection(self):
        
        self.status       = CANDIDATE  # Becomes a Candidate
        self.currentTerm  += 1 # Increments its current term
        self.votedFor     = self.id    # votedFor itself
        self.voteCount    = [self.id]  # has one vote initially
        self.leader       = BROADCAST
        
            
        requestVoteRPC = {
            "src": self.id,
            "dst": BROADCAST,
            "leader": self.leader, 
            "type": REQUEST_VOTE,
            "cid": self.id,
            'MID': str(random.randint(1000000, 9999999)),
            "term": self.currentTerm,
            "lastLogIndex": len(self.log) - 1,
            "lastLogTerm": 0 if not self.log else self.log[-1]['term']}
        
        self.send(requestVoteRPC)
        
        self.timerStart = time.time() * 1000 # Timer reset
        
    
    
    # When other servers that are still followers give their vote
    def handleRequestVoteRPC(self, msg):
        
        if msg['term'] < self.currentTerm:
            return # Don't give vote
    
        lastLogTerm = 0 if not self.log else self.log[-1]['term']
        
        if msg['lastLogTerm'] < lastLogTerm:
            return # Don't give vote

        if msg['lastLogTerm'] == lastLogTerm and msg['lastLogIndex'] < len(self.log) - 1:
            return # Don't give vote
        
        if msg['term'] == self.currentTerm and self.votedFor:
            return
        
        self.votedFor = msg['cid']
        self.timerStart = time.time() * 1000 # We reset the timer
    
        vote = {
            "src": self.id,
            "dst": msg['cid'],
            "leader": self.leader,
            "type": GIVE_VOTE,
            "term": self.currentTerm,
            "voteGranted": True}
            
        self.send(vote)
        
        
    
    # This function handles the vote if given
    def handleVote(self, msg):
        
        if self.status == CANDIDATE and msg['voteGranted']:
            
            if msg['src'] not in self.voteCount:
                self.voteCount += [msg['src']]
            
            if len(self.voteCount) > 2:
                self.status = LEADER
                self.leader = self.id
                self.voteCount = []
                self.votedFor  = None
                
                for id in self.others:
                    self.nextIndex[id]  = len(self.log)
                    self.matchIndex[id] = -1
                    
                self.appendEntries(BROADCAST, len(self.log) - 1)


    def appendEntries(self, dst, prevLogIndex):
        
        
        self.timerStart = time.time() * 1000

        prevLogTerm = 0
        if self.log and prevLogIndex >= 0:
            prevLogTerm = self.log[prevLogIndex]['term']
        
        entries = []
        if len(self.log) - prevLogIndex > 20:
            entries = self.log[prevLogIndex + 1: prevLogIndex + 20]
        else:
            entries = self.log[prevLogIndex + 1:]
        
        # if len(self.log) - prevLogIndex < 5:
        #     entries = []
            
        appendEntriesRPC = {
            "src": self.id,
            "dst": dst,
            "type": APPEND_ENTRIES,
            "term": self.currentTerm,
            "leader": self.leader, 
            "entries": entries,
            "prevLogIndex": prevLogIndex,
            "prevLogTerm": prevLogTerm, # term of prevLogIndex Entry
            "leaderCommit": self.commitIndex}
        
        self.send(appendEntriesRPC)
            
    def handleAppendEntries(self, msg):
        
        self.timerStart = time.time() * 1000
        
        success = True
        if msg['term'] < self.currentTerm:
            success = False
        elif msg['prevLogIndex'] != -1:
            if msg['prevLogIndex'] >= len(self.log):
                success = False
            elif self.log[msg['prevLogIndex']]['term'] != msg['prevLogTerm']:
                success = False
                
        if not success:
            
            response = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': APPEND_ENTRIES_RESPONSE,
                'term': self.currentTerm,
                'success': False,
                'replicaCommit': self.commitIndex}
            
            self.send(response)
        
        else:
            
            self.leader = msg['leader']
            
            if not msg['entries']:
                return
            
            self.log = self.log[:msg['prevLogIndex'] + 1] + msg['entries']
            
            self.lastLogIndex = len(self.log) - 1
            self.lastLogTerm  = 0 if not self.log else self.log[-1]['term']
            
            if msg['leaderCommit'] > self.commitIndex:
                self.commitIndex = min(msg['leaderCommit'], self.lastLogIndex)
            self.commitNow()

            response = {
                'src': self.id,
                'dst': msg['leader'],
                'leader': self.leader,
                'type': APPEND_ENTRIES_RESPONSE,
                'term': self.currentTerm,
                'success': True,
                'upto': len(self.log)
            }
            self.send(response)
        
    def handleAppendEntriesResponse(self, msg):
        
        if msg['success']:
            self.nextIndex[msg['src']]  = max(msg['upto'], self.nextIndex[msg['src']])
            self.matchIndex[msg['src']] = self.nextIndex[msg['src']] - 1
        else:
            # if self.nextIndex[msg['src']] > msg['repli']:
            self.nextIndex[msg['src']] = min(msg['replicaCommit'] + 1, self.nextIndex[msg['src']])
            self.matchIndex[msg['src']] = msg['replicaCommit']
            self.appendEntries(msg['src'], self.nextIndex[msg['src']] - 1)

     
    def redirect(self, msg):
        
        temp = msg.copy()
        temp['src']  = self.id
        temp['dst']  = msg['src']
        temp['type'] = 'redirect'
        temp['leader'] = self.leader
        
        self.send(temp)

        
    # Simply handles failed message
    def failed_msg(self, msg):
        
        temp = msg.copy()
        temp['src'] = self.id
        temp['dst'] = msg['src']
        temp['leader'] = self.leader
        temp['type'] = 'fail'
        
        self.send(temp)
    
    def check_term(self, msg):
        
        if msg['term'] > self.currentTerm:
            self.status      = FOLLOWER
            self.currentTerm = msg['term']
            self.voteCount   = []
            self.votedFor    = None
            self.leader      = msg['leader']
        
    
    def commitNow(self):
        
        for i in range(self.lastApplied + 1, self.commitIndex + 1):
            
            operation = self.log[i]
                
            MID = self.log[i]['MID']
            src = self.log[i]['src']
            key = self.log[i]['key']
            
            response = {
                "src": self.id,
                "dst": src,
                "leader": self.leader,
                "type": "ok",
                "MID": MID
            }
            
            if operation['type'] == GET:
                response['key']   = key
                response['value'] = self.datastore.get(key, "")
            
            if operation['type'] == PUT:
                self.datastore[key] = operation['val']
            
            if self.status == LEADER:
                self.send(response)
        
        self.lastApplied = self.commitIndex            
        
    def updateCommitIndex(self):
        
        if self.status == LEADER:
            for N in range(self.commitIndex + 1, len(self.log)):
                count = sum([1 if matchIndex > self.commitIndex else 0 for matchIndex in self.matchIndex.values()])
                if count >= 2 and self.log[N]['term'] == self.currentTerm:
                    self.commitIndex = N
                    self.commitNow()
                
    def handlePUT(self, msg):
        
        if self.status != LEADER:
            self.redirect(msg)
        else:
            entry = {
                'key': msg['key'],
                'val': msg['value'],
                'MID': msg['MID'],
                'type': PUT,
                'term': self.currentTerm,
                'src': msg['src']
            }
            self.log.append(entry)
            self.updateCommitIndex()
            self.commitNow()
    
    def handleGET(self, msg):
        
        if self.status != LEADER:
            self.redirect(msg)
        else:
            entry = {
                'key': msg['key'],
                'MID': msg['MID'],
                'type': GET,
                'term': self.currentTerm,
                'src': msg['src']
            }
            
            self.log.append(entry)
            self.updateCommitIndex()
            self.commitNow()
        
        
        
    def handle_msg(self, msg):
        
        
        if msg['src'] == self.id:
            return
        
        if msg["type"] == REQUEST_VOTE: 
            self.handleRequestVoteRPC(msg)
            
        elif msg["type"] == GIVE_VOTE:
            self.handleVote(msg)
            
        elif msg['type'] == APPEND_ENTRIES:
            if self.status != LEADER:
                self.handleAppendEntries(msg)
            
        elif msg['type'] == APPEND_ENTRIES_RESPONSE:
            if self.status == LEADER:
                self.handleAppendEntriesResponse(msg)
        
        elif msg['type'] == PUT:
            self.handlePUT(msg)
            
        elif msg['type'] == GET:
            self.handleGET(msg)
        else:
            self.failed_msg(msg)
            
    def run(self):
        
        while True:
            try: 
                
                if self.status == LEADER:
                    
                    self.updateCommitIndex()
                    self.commitNow()
                    
                    if time.time() * 1000 >= self.timerStart + random.uniform(0.1*T, 0.2*T):
                        self.appendEntries(BROADCAST, len(self.log) - 1)
                
                else:
                    if self.status == FOLLOWER:
                        self.commitNow()
                
                    if time.time() * 1000 >= self.timerStart + random.uniform(T, 2*T):
                        self.startElection()
                
                replicas, _, _ = select.select([self.socket], [], [], 0.1)
                for r in replicas:
                    data, addr = r.recvfrom(65535)
                    full_message = data.decode('utf-8')
                    msg = json.loads(full_message)
                    
                    print("Received message '%s'" % (msg,), flush=True)
                    
                    if 'term' in msg and msg['term'] > self.currentTerm:
                        self.currentTerm = msg['term']
                        self.status      = FOLLOWER
                        self.votedFor    = None
                        self.timerStart  = time.time() * 1000
                        self.voteCount   = []
                        # self.leader      = msg['leader']
                    
                    
                    self.handle_msg(msg)
            
            except BlockingIOError:
                continue
            
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()